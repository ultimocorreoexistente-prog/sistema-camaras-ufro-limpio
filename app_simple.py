#!/usr/bin/env python3
"""
Aplicaci√≥n simplificada para diagn√≥stico b√°sico del Sistema de C√°maras UFRO
Este archivo es una versi√≥n m√≠nima para verificar que la aplicaci√≥n puede iniciar.
"""

import os
import sys
from datetime import datetime
from flask import Flask, jsonify

app = Flask(__name__)

# Configuraci√≥n b√°sica
app.config['SECRET_KEY'] = os.environ.get('SECRET_KEY', 'dev-secret-key-change-in-production')
print(f"üîß SECRET_KEY configurada: {'‚úÖ' if os.environ.get('SECRET_KEY') else '‚ùå'}")

# Detectar base de datos
database_url = os.environ.get('DATABASE_URL', 'NO_CONFIGURADA')
print(f"üóÑÔ∏è DATABASE_URL: {'‚úÖ Configurada' if database_url != 'NO_CONFIGURADA' else '‚ùå NO_CONFIGURADA'}")

if database_url == 'NO_CONFIGURADA':
    print("‚ö†Ô∏è ATENCI√ìN: DATABASE_URL no est√° configurada")
else:
    # Verificar formato de URL
    if database_url.startswith('postgres://'):
        database_url = database_url.replace('postgres://', 'postgresql://', 1)
        print("üîÑ Convertida URL de postgres:// a postgresql://")

@app.route('/')
def home():
    """P√°gina principal - verificaci√≥n b√°sica"""
    return jsonify({
        'status': 'OK',
        'timestamp': datetime.now().isoformat(),
        'message': 'Sistema C√°maras UFRO - Versi√≥n de Diagn√≥stico',
        'environment': {
            'has_secret_key': bool(os.environ.get('SECRET_KEY')),
            'has_database_url': bool(os.environ.get('DATABASE_URL')),
            'database_url_prefix': os.environ.get('DATABASE_URL', '')[:50] + '...' if os.environ.get('DATABASE_URL') else 'None'
        }
    })

@app.route('/health')
def health_check():
    """Health check para Railway"""
    return jsonify({
        'status': 'healthy',
        'timestamp': datetime.now().isoformat(),
        'checks': {
            'flask_running': True,
            'environment_vars': {
                'secret_key': '‚úÖ' if os.environ.get('SECRET_KEY') else '‚ùå',
                'database_url': '‚úÖ' if os.environ.get('DATABASE_URL') else '‚ùå'
            }
        }
    })

@app.route('/test-db')
def test_database():
    """Test b√°sico de conexi√≥n a base de datos"""
    database_url = os.environ.get('DATABASE_URL')
    
    if not database_url:
        return jsonify({
            'error': 'DATABASE_URL no configurada',
            'message': 'Necesitas configurar la variable DATABASE_URL en Railway'
        }), 400
    
    try:
        # Intentar conectar sin importar SQLAlchemy complejo
        import psycopg2
        
        # Convertir postgres:// a postgresql:// si es necesario
        if database_url.startswith('postgres://'):
            database_url = database_url.replace('postgres://', 'postgresql://', 1)
        
        conn = psycopg2.connect(database_url)
        cursor = conn.cursor()
        
        # Test simple
        cursor.execute("SELECT 1")
        result = cursor.fetchone()[0]
        
        cursor.execute("""
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public' 
            ORDER BY table_name
        """)
        tablas = [row[0] for row in cursor.fetchall()]
        
        cursor.close()
        conn.close()
        
        return jsonify({
            'status': 'success',
            'database_connection': '‚úÖ OK',
            'test_query_result': result,
            'total_tablas': len(tablas),
            'tablas': tablas,
            'message': 'Conexi√≥n a PostgreSQL exitosa'
        })
        
    except ImportError:
        return jsonify({
            'error': 'psycopg2 no est√° disponible',
            'message': 'Ejecutar: uv pip install psycopg2-binary'
        }), 500
    except Exception as e:
        return jsonify({
            'error': f'Error conectando a base de datos: {str(e)}',
            'database_url_prefix': database_url[:50] + '...' if database_url else 'None',
            'message': 'Verificar DATABASE_URL y conectividad'
        }), 500

@app.route('/setup-complete')
def setup_complete():
    """Confirmar que las variables est√°n bien configuradas"""
    return jsonify({
        'timestamp': datetime.now().isoformat(),
        'railway_variables': {
            'SECRET_KEY': '‚úÖ Configurada' if os.environ.get('SECRET_KEY') else '‚ùå FALTANTE',
            'DATABASE_URL': '‚úÖ Configurada' if os.environ.get('DATABASE_URL') else '‚ùå FALTANTE',
            'FLASK_ENV': os.environ.get('FLASK_ENV', 'No configurada'),
            'PORT': os.environ.get('PORT', 'No configurada')
        },
        'next_steps': [
            '1. Si falta SECRET_KEY: Configurar en Railway Dashboard',
            '2. Si falta DATABASE_URL: Configurar en Railway Dashboard',
            '3. Una vez configuradas, el sistema completo estar√° disponible en /login'
        ]
    })

if __name__ == '__main__':
    print("üöÄ Iniciando Sistema C√°maras UFRO - Modo Diagn√≥stico")
    print(f"üìÖ Timestamp: {datetime.now().isoformat()}")
    print(f"üåç Host: 0.0.0.0")
    print(f"üîå Puerto: {int(os.environ.get('PORT', 8000))}")
    
    # Verificar que psycopg2 est√° disponible
    try:
        import psycopg2
        print("‚úÖ psycopg2 disponible")
    except ImportError:
        print("‚ùå psycopg2 NO disponible - instalar con: uv pip install psycopg2-binary")
    
    port = int(os.environ.get('PORT', 8000))
    app.run(host='0.0.0.0', port=port, debug=False)