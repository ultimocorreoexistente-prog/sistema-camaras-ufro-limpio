#!/usr/bin/env python3
"""
SCRIPT DE RECUPERACI√ìN DE EMERGENCIA ACTUALIZADO
Versi√≥n que maneja la conectividad limitada de Railway durante mantenimiento
"""

import psycopg2
import sys
import subprocess
import json
from datetime import datetime
import os

def test_railway_connectivity():
    """Probar diferentes formas de conectar con Railway durante mantenimiento"""
    
    # URLs alternativas para intentar
    urls_to_test = [
        "https://gestion-camaras-ufro.up.railway.app",
        "https://gestion-camaras-ufro-production.up.railway.app"
    ]
    
    print("üîç PROBANDO CONECTIVIDAD RAILWAY:")
    
    for url in urls_to_test:
        try:
            result = subprocess.run([
                "curl", "-s", "-o", "/dev/null", "-w", "%{http_code}", url
            ], capture_output=True, text=True, timeout=10)
            
            status_code = result.stdout.strip()
            print(f"  üì° {url} -> HTTP {status_code}")
            
            if status_code not in ["404", "502", "503"]:
                print(f"  ‚úÖ Conectividad encontrada en: {url}")
                return url, True
                
        except Exception as e:
            print(f"  ‚ùå Error conectando a {url}: {str(e)}")
    
    return None, False

def emergency_rollback():
    """Conectar directamente a PostgreSQL y hacer rollback de emergencia"""
    
    # Configuraci√≥n de conexi√≥n PostgreSQL (desde Railway)
    DATABASE_URL = "postgresql://postgres:WMQxvzTQsdkiAUOqfMgXmzgAHqxDkwRJ@postgres.railway.internal:5432/railway"
    
    try:
        print("üîß INICIANDO RECUPERACI√ìN DE EMERGENCIA ACTUALIZADA")
        print(f"‚è∞ Timestamp: {datetime.now().isoformat()}")
        print("=" * 60)
        
        # 1. Verificar conectividad Railway
        working_url, is_connected = test_railway_connectivity()
        
        if not is_connected:
            print("‚ö†Ô∏è RAILWAY EN MANTENIMIENTO - Esperando restauraci√≥n...")
            print("üîß EJECUTANDO RECUPERACI√ìN LOCAL DE ESTADO")
            
            # Intentar conectar con timeout corto
            try:
                print("üì° Intentando conexi√≥n PostgreSQL (timeout 10s)...")
                conn = psycopg2.connect(DATABASE_URL, connect_timeout=10)
                conn.set_isolation_level(psycopg2.extensions.ISOLATION_LEVEL_AUTOCOMMIT)
                
                cursor = conn.cursor()
                
                # ROLLBACK forzado
                print("üîÑ Ejecutando ROLLBACK de emergencia...")
                cursor.execute("ROLLBACK;")
                print("‚úÖ ROLLBACK completado exitosamente")
                
                # Verificar tablas
                cursor.execute("""
                    SELECT table_name 
                    FROM information_schema.tables 
                    WHERE table_schema = 'public' 
                    ORDER BY table_name
                """)
                
                tablas = cursor.fetchall()
                print(f"üìã Tablas encontradas: {len(tablas)}")
                
                for tabla in tablas:
                    print(f"  ‚úÖ {tabla[0]}")
                
                cursor.close()
                conn.close()
                return True
                
            except Exception as e:
                print(f"‚ùå Conexi√≥n PostgreSQL fall√≥: {str(e)}")
                print("üîÑ RAILWAY A√öN EN MANTENIMIENTO - Esperando...")
                return False
        
        else:
            print(f"‚úÖ Railway activo en: {working_url}")
            print("üöÄ Sistema deber√≠a estar funcionando")
            return True
            
    except Exception as e:
        print(f"\n‚ùå ERROR EN RECUPERACI√ìN: {str(e)}")
        print(f"   Tipo de error: {type(e).__name__}")
        return False

def prepare_deploy_fix():
    """Preparar las correcciones para deploy una vez Railway est√© activo"""
    
    print("\nüîß PREPARANDO CORRECCIONES PARA DEPLOY...")
    
    # Verificar si tenemos los archivos necesarios
    app_files = [
        "app.py",
        "models.py", 
        "requirements.txt"
    ]
    
    for file in app_files:
        if os.path.exists(file):
            print(f"  ‚úÖ {file} disponible")
        else:
            print(f"  ‚ùå {file} faltante")
    
    # Verificar estructura
    if os.path.exists("templates"):
        print("  ‚úÖ templates/ disponible")
    if os.path.exists("static"):
        print("  ‚úÖ static/ disponible")

def main():
    print("SISTEMA DE RECUPERACI√ìN DE EMERGENCIA - POSTGRESQL v2.0")
    print("=" * 60)
    
    # Ejecutar recuperaci√≥n
    success = emergency_rollback()
    
    if not success:
        print("\n‚ö†Ô∏è RAILWAY EN MANTENIMIENTO - CORRECCIONES PREPARADAS")
        print("üí° Una vez que Railway est√© activo, ejecutar deploy")
        
        prepare_deploy_fix()
        
        print("\nüìã PLAN DE ACCI√ìN:")
        print("1. Esperar restauraci√≥n completa de Railway")
        print("2. Ejecutar git push con tokens restaurados")
        print("3. Railway desplegar√° autom√°ticamente las correcciones")
        print("4. Sistema de login funcionar√° normalmente")
        
    else:
        print("\n‚úÖ RECUPERACI√ìN COMPLETADA - Sistema operativo")
    
    return success

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)