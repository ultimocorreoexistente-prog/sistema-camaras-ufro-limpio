#!/usr/bin/env python3
"""
Aplicaci√≥n simplificada funcional para el Sistema de C√°maras UFRO
Versi√≥n estable con la funcionalidad b√°sica pero sin endpoints complejos
"""

import os
from datetime import datetime
from flask import Flask, jsonify

# Crear app Flask b√°sica
app = Flask(__name__)

# Configuraci√≥n b√°sica con variables de entorno
app.config['SECRET_KEY'] = os.environ.get('SECRET_KEY', 'dev-secret-key-change-in-production')
print(f"üîß SECRET_KEY configurada: {'‚úÖ' if os.environ.get('SECRET_KEY') else '‚ùå'}")

# Base de datos
database_url = os.environ.get('DATABASE_URL', 'sqlite:///sistema_camaras.db')
if database_url.startswith('postgres://'):
    database_url = database_url.replace('postgres://', 'postgresql://', 1)
    print("üîÑ Convertida URL de postgres:// a postgresql://")

print(f"üóÑÔ∏è DATABASE_URL: {'‚úÖ Configurada' if os.environ.get('DATABASE_URL') else '‚ùå NO_CONFIGURADA'}")

# Inicializar solo si tenemos configuraci√≥n completa
if os.environ.get('SECRET_KEY') and os.environ.get('DATABASE_URL'):
    try:
        from flask_sqlalchemy import SQLAlchemy
        from flask_login import LoginManager
        
        db = SQLAlchemy(app)
        login_manager = LoginManager(app)
        login_manager.login_view = 'login'
        
        # Configuraci√≥n de base de datos
        app.config['SQLALCHEMY_DATABASE_URI'] = database_url
        app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
        
        @login_manager.user_loader
        def load_user(user_id):
            from models import Usuario
            return Usuario.query.get(int(user_id))
            
        print("‚úÖ Base de datos configurada correctamente")
        
        # Intentar crear todas las tablas (no fallar si hay problemas)
        with app.app_context():
            try:
                db.create_all()
                print("‚úÖ Tablas creadas/verificadas")
            except Exception as e:
                print(f"‚ö†Ô∏è Advertencia al crear tablas: {str(e)}")
                
    except ImportError as e:
        print(f"‚ö†Ô∏è No se pudieron cargar m√≥dulos de base de datos: {str(e)}")
        print("üîÑ Usando modo sin base de datos")
    except Exception as e:
        print(f"‚ö†Ô∏è Error inicializando base de datos: {str(e)}")
        print("üîÑ Continuando sin base de datos")

@app.route('/')
def home():
    """P√°gina principal con informaci√≥n de estado"""
    return jsonify({
        'status': 'SUCCESS',
        'timestamp': datetime.now().isoformat(),
        'message': 'Sistema C√°maras UFRO - Versi√≥n Funcional',
        'environment': {
            'has_secret_key': bool(os.environ.get('SECRET_KEY')),
            'has_database_url': bool(os.environ.get('DATABASE_URL')),
            'database_url_prefix': (os.environ.get('DATABASE_URL', '')[:30] + '...') if os.environ.get('DATABASE_URL') else 'None',
            'flask_env': os.environ.get('FLASK_ENV', 'development'),
            'port': os.environ.get('PORT', '8000')
        },
        'endpoints': {
            'health': '/health',
            'test_db': '/test-db',
            'setup_complete': '/setup-complete'
        },
        'next_steps': [
            '1. Si todas las variables est√°n ‚úÖ, el sistema est√° listo',
            '2. Verificar /health para confirmar estado',
            '3. Verificar /test-db para confirmar conexi√≥n PostgreSQL',
            '4. Una vez verificado, restaurar sistema completo'
        ]
    })

@app.route('/health')
def health_check():
    """Health check para verificar que la aplicaci√≥n funciona"""
    health_data = {
        'status': 'healthy' if os.environ.get('SECRET_KEY') and os.environ.get('DATABASE_URL') else 'partial',
        'timestamp': datetime.now().isoformat(),
        'checks': {
            'flask_running': True,
            'secret_key': '‚úÖ Configurada' if os.environ.get('SECRET_KEY') else '‚ùå FALTANTE',
            'database_url': '‚úÖ Configurada' if os.environ.get('DATABASE_URL') else '‚ùå FALTANTE'
        }
    }
    
    status_code = 200 if health_data['checks']['secret_key'] != '‚ùå FALTANTE' and health_data['checks']['database_url'] != '‚ùå FALTANTE' else 503
    return jsonify(health_data), status_code

@app.route('/test-db')
def test_database():
    """Test b√°sico de conexi√≥n a base de datos"""
    database_url = os.environ.get('DATABASE_URL')
    
    if not database_url:
        return jsonify({
            'error': 'DATABASE_URL no configurada',
            'message': 'Necesitas configurar la variable DATABASE_URL en Railway'
        }), 400
    
    try:
        import psycopg2
        
        # Convertir postgres:// a postgresql:// si es necesario
        if database_url.startswith('postgres://'):
            database_url = database_url.replace('postgres://', 'postgresql://', 1)
        
        conn = psycopg2.connect(database_url)
        cursor = conn.cursor()
        
        # Test simple
        cursor.execute("SELECT 1")
        result = cursor.fetchone()[0]
        
        # Verificar estructura de tablas
        cursor.execute("""
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public' 
            ORDER BY table_name
        """)
        tablas = [row[0] for row in cursor.fetchall()]
        
        # Verificar tablas espec√≠ficas del sistema
        cursor.execute("""
            SELECT COUNT(*) FROM information_schema.tables 
            WHERE table_name = 'usuarios' AND table_schema = 'public'
        """)
        tiene_usuarios = cursor.fetchone()[0] > 0
        
        cursor.close()
        conn.close()
        
        return jsonify({
            'status': 'success',
            'database_connection': '‚úÖ OK',
            'test_query_result': result,
            'total_tablas': len(tablas),
            'tablas': tablas,
            'tiene_tabla_usuarios': tiene_usuarios,
            'message': 'Conexi√≥n a PostgreSQL exitosa'
        })
        
    except ImportError:
        return jsonify({
            'error': 'psycopg2 no est√° disponible',
            'message': 'Ejecutar: uv pip install psycopg2-binary'
        }), 500
    except Exception as e:
        return jsonify({
            'error': f'Error conectando a base de datos: {str(e)}',
            'database_url_prefix': database_url[:30] + '...' if database_url else 'None',
            'message': 'Verificar DATABASE_URL y conectividad'
        }), 500

@app.route('/setup-complete')
def setup_complete():
    """Confirmar que las variables est√°n bien configuradas"""
    status = '‚úÖ COMPLETO' if os.environ.get('SECRET_KEY') and os.environ.get('DATABASE_URL') else '‚ö†Ô∏è INCOMPLETO'
    
    return jsonify({
        'timestamp': datetime.now().isoformat(),
        'status': status,
        'railway_variables': {
            'SECRET_KEY': '‚úÖ Configurada' if os.environ.get('SECRET_KEY') else '‚ùå FALTANTE',
            'DATABASE_URL': '‚úÖ Configurada' if os.environ.get('DATABASE_URL') else '‚ùå FALTANTE',
            'FLASK_ENV': os.environ.get('FLASK_ENV', 'No configurada'),
            'PORT': os.environ.get('PORT', 'No configurada')
        },
        'next_steps': [
            '1. Si faltan variables: Configurar en Railway Dashboard',
            '2. Una vez configuradas todas las variables ‚úÖ, el sistema estar√° listo',
            '3. Verificar /test-db para confirmar conexi√≥n PostgreSQL',
            '4. Cuando todo est√© ‚úÖ, restaurar aplicaci√≥n completa'
        ]
    })

@app.route('/login')
def login_placeholder():
    """Placeholder del login (ser√° activado cuando la aplicaci√≥n est√© completa)"""
    if not os.environ.get('SECRET_KEY') or not os.environ.get('DATABASE_URL'):
        return jsonify({
            'error': 'Variables de entorno no configuradas',
            'message': 'Configurar SECRET_KEY y DATABASE_URL primero',
            'url_setup': '/setup-complete'
        }), 400
    
    return jsonify({
        'message': 'Sistema C√°maras UFRO - Login',
        'status': 'Preparado',
        'note': 'Sistema completo disponible en pr√≥ximas versiones'
    })

if __name__ == '__main__':
    print("üöÄ Iniciando Sistema C√°maras UFRO - Versi√≥n Funcional Estable")
    print(f"üìÖ Timestamp: {datetime.now().isoformat()}")
    print(f"üåç Host: 0.0.0.0")
    print(f"üîå Puerto: {int(os.environ.get('PORT', 8000))}")
    print(f"üóÑÔ∏è Database: {'PostgreSQL' if os.environ.get('DATABASE_URL') else 'SQLite (desarrollo)'}")
    
    # Verificar que psycopg2 est√° disponible
    try:
        import psycopg2
        print("‚úÖ psycopg2 disponible")
    except ImportError:
        print("‚ö†Ô∏è psycopg2 NO disponible - instalar con: uv pip install psycopg2-binary")
    
    port = int(os.environ.get('PORT', 8000))
    app.run(host='0.0.0.0', port=port, debug=False)